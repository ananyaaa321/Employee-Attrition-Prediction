# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11clasQopvqUcN8rVV_owd-OZDN4Pfru_
"""

# Description: This program predicts employee attrition.

#Import Libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#load the data
from google.colab import files # Use to load data on Google Colab 
uploaded = files.upload()

#store the data into a data frame
df= pd.read_csv('HR_Employee_Attrition-1.csv')
#print first 10 rows
df.head(10)

df.shape

df.dtypes

df.isna()

df.isna().sum()

#view some stats
df.describe()

#no. of employees in the company and no of employees who have left
df['Attrition'].value_counts()

sns.countplot(df['Attrition'])

#acccuracy when it always predicts a 'NO'
(2466-474)/2466

fig_dims = (15, 6)
fig, ax = plt.subplots(figsize=fig_dims)

#ax = axis
sns.countplot(x='Age', hue='Attrition', data = df, palette="colorblind", ax = ax,  edgecolor=sns.color_palette("dark", n_colors = 1));

for column in df.columns:
    if df[column].dtype == object:
        print(str(column) + ' : ' + str(df[column].unique()))
        print(df[column].value_counts())
        print("_________________________________________________________________")

#Remove unneeded columns


df = df.drop('EmployeeNumber', axis = 1) 

df = df.drop('StandardHours', axis = 1) 

df = df.drop('EmployeeCount', axis = 1) 

df = df.drop('Over18', axis = 1)

#Get the correlation of the columns
df.corr()

#Visualize the correlation
plt.figure(figsize=(14,14))  #14in by 14in
sns.heatmap(df.corr(), annot=True, fmt='.0%')

#Transform non-numeric columns into numerical columns
from sklearn.preprocessing import LabelEncoder

for column in df.columns:
        if df[column].dtype == np.number:
            continue
        df[column] = LabelEncoder().fit_transform(df[column])

df

#Split the data into independent 'X' and dependent 'Y' variables
X = df.iloc[:, 1:df.shape[1]].values 
Y = df.iloc[:, 0].values

# Split the dataset into 75% Training set and 25% Testing set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.25, random_state = 0)

#Use Random Forest Classification algorithm
from sklearn.ensemble import RandomForestClassifier
forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
forest.fit(X_train, Y_train)

#Get the accuracy on the training data
forest.score(X_train, Y_train)

#Show the confusion matrix and accuracy for  the model on the test data
#Classification accuracy is the ratio of correct predictions to total predictions made.
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(Y_test, forest.predict(X_test))
  
TN = cm[0][0]
TP = cm[1][1]
FN = cm[1][0]
FP = cm[0][1]
  
print(cm)
print('Model Testing Accuracy = "{}!"'.format(  (TP + TN) / (TP + TN + FN + FP)))
print()# Print a new line

DONE BY-
Ananya Barath
Aishwarya 
Lavanya N